<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    
    <link rel="manifest" href="~/manifest.json">
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            @*<div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>*@
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>Desenvolvido por <b>fdupont</b>, <b>mperes</b> e <b>jstein</b>, FORA DO EXPEDIENTE DE TRABALHO!</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

    <script>
        var reg;
        var sub;
        var isSubscribed = false;
        //var subscribeButton = document.querySelector('button');

        if ('serviceWorker' in navigator) {
            console.log('Service Worker is supported');
            navigator.serviceWorker.register('sw.js').then(function () {
                return navigator.serviceWorker.ready;
            }).then(function (serviceWorkerRegistration) {
                reg = serviceWorkerRegistration;
                //subscribeButton.disabled = false;
                console.log('Service Worker is ready :^)', reg);
                $(document).ready(function () {
                    subscribe();
                });
            }).catch(function (error) {
                console.log('Service Worker Error :^(', error);
            });
        }

        //subscribeButton.addEventListener('click', function () {
        //    if (isSubscribed) {
        //        unsubscribe();
        //    } else {
        //        subscribe();
        //    }
        //});

        


        function subscribe() {
            reg.pushManager.subscribe({ userVisibleOnly: true }).
            then(function (pushSubscription) {
                sub = pushSubscription;
                console.log('Subscribed! Endpoint:', sub.endpoint);

                $.ajax({
                    url: window.location.href + "api/push/register",
                    type: "post", 
                    data: {
                        endpoint:sub.endpoint
                    }
                });


                //subscribeButton.textContent = 'Unsubscribe';
                isSubscribed = true;
            });
        }

        function unsubscribe() {
            sub.unsubscribe().then(function (event) {
                //subscribeButton.textContent = 'Subscribe';
                console.log('Unsubscribed!', event);
                isSubscribed = false;

                $.ajax({
                    url: window.location.href + "api/push/unregister",
                    type: "post", 
                    data: {
                        endpoint: sub.endpoint
                    }
                });

            }).catch(function (error) {
                console.log('Error unsubscribing', error);
                //subscribeButton.textContent = 'Subscribe';
            });
        }
    </script>


    <script>
        $(document).ready(function () {
            $('datetimelocal').each(function (i, el) {
                var date = $(el).attr('date');
                if (date) {
                    var format = $(el).attr('format');
                    var formated = new Date(date).toLocaleString();
                    if (format) {
                        formated = moment(date).format(format);
                    }
                    $(el).text(formated);
                }
            });
        });
    </script>
</body>
</html>
